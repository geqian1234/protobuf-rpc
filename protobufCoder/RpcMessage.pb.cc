// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#include "RpcMessage.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rpc {
namespace codec {
        template <typename>
PROTOBUF_CONSTEXPR RpcMessage::RpcMessage(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.servicename_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.methodname_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.request_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ ::int64_t{0},
      /*decltype(_impl_.error_)*/ 0,
      /*decltype(_impl_.type_)*/ 1,
    } {}
struct RpcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMessageDefaultTypeInternal() {}
  union {
    RpcMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace codec
}  // namespace rpc
static ::_pb::Metadata file_level_metadata_RpcMessage_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_RpcMessage_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_RpcMessage_2eproto = nullptr;
const ::uint32_t TableStruct_RpcMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.servicename_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.methodname_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.request_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::rpc::codec::RpcMessage, _impl_.error_),
    6,
    4,
    0,
    1,
    2,
    3,
    5,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::rpc::codec::RpcMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::rpc::codec::_RpcMessage_default_instance_._instance,
};
const char descriptor_table_protodef_RpcMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020RpcMessage.proto\022\trpc.codec\"\253\001\n\nRpcMes"
    "sage\022 \n\004type\030\001 \002(\0162\022.rpc.codec.MsgType\022\n"
    "\n\002id\030\002 \002(\003\022\023\n\013serviceName\030\003 \002(\014\022\022\n\nmetho"
    "dName\030\004 \002(\014\022\017\n\007request\030\005 \001(\014\022\020\n\010response"
    "\030\006 \001(\014\022#\n\005error\030\007 \001(\0162\024.rpc.codec.ErrorC"
    "ode*/\n\007MsgType\022\013\n\007REQUEST\020\001\022\014\n\010RESPONSE\020"
    "\002\022\t\n\005ERROR\020\003*\225\001\n\tErrorCode\022\014\n\010NO_ERROR\020\000"
    "\022\017\n\013WRONG_PROTO\020\001\022\016\n\nNO_SERVICE\020\002\022\r\n\tNO_"
    "METHOD\020\003\022\023\n\017INVALID_REQUEST\020\004\022\024\n\020INVALID"
    "_RESPONSE\020\005\022\013\n\007TIMEOUT\020\006\022\022\n\016PENDDING_LIM"
    "IT\020\007"
};
static ::absl::once_flag descriptor_table_RpcMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RpcMessage_2eproto = {
    false,
    false,
    404,
    descriptor_table_protodef_RpcMessage_2eproto,
    "RpcMessage.proto",
    &descriptor_table_RpcMessage_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_RpcMessage_2eproto::offsets,
    file_level_metadata_RpcMessage_2eproto,
    file_level_enum_descriptors_RpcMessage_2eproto,
    file_level_service_descriptors_RpcMessage_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RpcMessage_2eproto_getter() {
  return &descriptor_table_RpcMessage_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RpcMessage_2eproto(&descriptor_table_RpcMessage_2eproto);
namespace rpc {
namespace codec {
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_RpcMessage_2eproto);
  return file_level_enum_descriptors_RpcMessage_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_RpcMessage_2eproto);
  return file_level_enum_descriptors_RpcMessage_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class RpcMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_servicename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_methodname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000053) ^ 0x00000053) != 0;
  }
};

RpcMessage::RpcMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpc.codec.RpcMessage)
}
RpcMessage::RpcMessage(const RpcMessage& from) : ::google::protobuf::Message() {
  RpcMessage* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.servicename_){},
      decltype(_impl_.methodname_){},
      decltype(_impl_.request_){},
      decltype(_impl_.response_){},
      decltype(_impl_.id_){},
      decltype(_impl_.error_){},
      decltype(_impl_.type_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.servicename_.Set(from._internal_servicename(), _this->GetArenaForAllocation());
  }
  _impl_.methodname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.methodname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.methodname_.Set(from._internal_methodname(), _this->GetArenaForAllocation());
  }
  _impl_.request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.request_.Set(from._internal_request(), _this->GetArenaForAllocation());
  }
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.response_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.response_.Set(from._internal_response(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));

  // @@protoc_insertion_point(copy_constructor:rpc.codec.RpcMessage)
}
inline void RpcMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.servicename_){},
      decltype(_impl_.methodname_){},
      decltype(_impl_.request_){},
      decltype(_impl_.response_){},
      decltype(_impl_.id_){::int64_t{0}},
      decltype(_impl_.error_){0},
      decltype(_impl_.type_){1},
  };
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.methodname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.methodname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.response_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:rpc.codec.RpcMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RpcMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servicename_.Destroy();
  _impl_.methodname_.Destroy();
  _impl_.request_.Destroy();
  _impl_.response_.Destroy();
}
void RpcMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.codec.RpcMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.servicename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.methodname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.request_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.response_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_));
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RpcMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> RpcMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RpcMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .rpc.codec.MsgType type = 1;
    {::_pbi::TcParser::FastEr1S1,
     {8, 6, 3, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.type_)}},
    // required int64 id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RpcMessage, _impl_.id_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_)}},
    // required bytes serviceName = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.servicename_)}},
    // required bytes methodName = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.methodname_)}},
    // optional bytes request = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.request_)}},
    // optional bytes response = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.response_)}},
    // optional .rpc.codec.ErrorCode error = 7;
    {::_pbi::TcParser::FastEr0S1,
     {56, 5, 7, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.error_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .rpc.codec.MsgType type = 1;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.type_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required int64 id = 2;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // required bytes serviceName = 3;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.servicename_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // required bytes methodName = 4;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.methodname_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes request = 5;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.request_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes response = 6;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.response_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .rpc.codec.ErrorCode error = 7;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.error_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {1, 3},
    {0, 8},
  }}, {{
  }},
};

::uint8_t* RpcMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.codec.RpcMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .rpc.codec.MsgType type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // required int64 id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  // required bytes serviceName = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_servicename();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // required bytes methodName = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_methodname();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional bytes request = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_request();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // optional bytes response = 6;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_response();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional .rpc.codec.ErrorCode error = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.codec.RpcMessage)
  return target;
}

::size_t RpcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.codec.RpcMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required bytes serviceName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_servicename());
    }

    // required bytes methodName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_methodname());
    }

  }
  if (cached_has_bits & 0x0000000cu) {
    // optional bytes request = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_request());
    }

    // optional bytes response = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_response());
    }

  }
  // required int64 id = 2;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // optional .rpc.codec.ErrorCode error = 7;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  // required .rpc.codec.MsgType type = 1;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RpcMessage::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RpcMessage::MergeImpl
};
const ::google::protobuf::Message::ClassData*RpcMessage::GetClassData() const { return &_class_data_; }


void RpcMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RpcMessage*>(&to_msg);
  auto& from = static_cast<const RpcMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.codec.RpcMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_servicename(from._internal_servicename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_methodname(from._internal_methodname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_request(from._internal_request());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_response(from._internal_response());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.codec.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RpcMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

void RpcMessage::InternalSwap(RpcMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.servicename_, lhs_arena,
                                       &other->_impl_.servicename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.methodname_, lhs_arena,
                                       &other->_impl_.methodname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_, lhs_arena,
                                       &other->_impl_.request_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.response_, lhs_arena,
                                       &other->_impl_.response_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.type_)
      + sizeof(RpcMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata RpcMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RpcMessage_2eproto_getter, &descriptor_table_RpcMessage_2eproto_once,
      file_level_metadata_RpcMessage_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace codec
}  // namespace rpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
